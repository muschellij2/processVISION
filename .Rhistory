# file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
tab = htmlToCSV(file, writeFile= FALSE,
tab.attr= "class",
tab.type= "normal_table")
######################################
# Outfile is the name (including .csv suffix) to be written
######################################
if (is.null(outfile)){
outdir = dirname(file)
bn = basename(file)
outfile = paste0(gsub("(.*)\\.htm", "\\1", bn), ".csv")
outfile = file.path(outdir, outfile)
}
######################################
# Parse XML
doc = htmlParse(file, useInternalNodes=TRUE)
tab.attr = "class"
tab.type ="normal_table"
sums <- xpathSApply(doc, '//table', xmlGetAttr, tab.attr)
sums = unlist(sums)
if (verbose){
cat("The types of tables available are:")
cat(paste0(paste(sums, collapse=", "), "\n"))
}
sums
which.sum = which(sums == tab.type)
which.su
which.sum
sum.chosen = sums[which.sum]
xpath = paste0('//table[@', tab.attr, '="', sum.chosen , '"]')
xpath
nodeset <- getNodeSet(doc, xpath)
nodeset
xx = paste0(xpath, '//tr[@class="middle_row"]')
hdrs = getNodeSet(doc, xx)
hdrs
xx = paste0(xpath, '//tr[@class="middle_row"]')
xx = paste0(xpath, '//tr//td[@class="column_header"]')
hdrs = getNodeSet(doc, xx)
hdrs
xx = paste0(xpath, '//tr/td[@class="column_header"]')
xx
hdrs = getNodeSet(doc, xx)
hrs
hdrs
xx = paste0(xpath, '//tr')
xx
hdrs = getNodeSet(doc, xx)
hdrs
xx = paste0(xpath, '/tr')
hdrs = getNodeSet(doc, xx)
lapply(hdrs, getNodeset, "/td[@class='column_header'")
lapply(hdrs, getNodeSet, "/td[@class='column_header'")
hdrs
nodeset <- getNodeSet(doc, xpath)
#   xx = paste0(xpath, '//tr[@class="middle_row"]')
xx = paste0(xpath, '/tr')
hdrs = getNodeSet(doc, xx)
lapply(hdrs, getNodeSet, "/td[@class='column_header'")
hrs
hdrs
nodeset <- getNodeSet(doc, xpath)
#   xx = paste0(xpath, '//tr[@class="middle_row"]')
xx = paste0(xpath, '//tr')
hdrs = getNodeSet(doc, xx)
lapply(hdrs, getNodeSet, "/td[@class='column_header'")
lapply(hdrs, getNodeSet, "//td[@class='column_header'")
hdrs
getNodeSet(hdrs, )
nodeset <- getNodeSet(doc, xpath)
#   xx = paste0(xpath, '//tr[@class="middle_row"]')
xx = paste0(xpath, '//tr')
hdrs = getNodeSet(doc, xx)
getNodeSet(hdrs, "//td[@class='column_header']")
hdrs = getNodeSet(doc, xx)
hdrs
if (is.null(outfile)){
outdir = dirname(file)
bn = basename(file)
outfile = paste0(gsub("(.*)\\.htm", "\\1", bn), ".csv")
outfile = file.path(outdir, outfile)
}
######################################
# Parse XML
doc = htmlParse(file, useInternalNodes=TRUE)
######################################
# Get table names from summary
######################################
sums <- xpathSApply(doc, '//table', xmlGetAttr, tab.attr)
sums = unlist(sums)
if (verbose){
cat("The types of tables available are:")
cat(paste0(paste(sums, collapse=", "), "\n"))
}
######################################
# we want queries (SHINY will dynamically select this)
######################################
which.sum = which(sums == tab.type)
sum.chosen = sums[which.sum]
xpath = paste0('//table[@', tab.attr, '="', sum.chosen , '"]')
xpath
nodeset <- getNodeSet(doc, xpath)
xx = paste0(xpath, '//tr[@class="middle_row"]')
#   xx = paste0(xpath, '//tr')
hdrs = getNodeSet(doc, xx)
#   getNodeSet(hdrs, "//td[@class='column_header']")
hds = lapply(hdrs, function(x) xpathSApply(x, "./td", xmlValue))
hd.l = lapply(hdrs, function(x) xpathSApply(x, "./td",
function(node) {
cspan = xmlGetAttr(node, "colspan")
if (is.null(cspan)) cspan = 1
as.numeric(cspan)
})
)
hdrs
hd.rs = lapply(hdrs, function(x) xpathSApply(x, "./td",
function(node) {
cspan = xmlGetAttr(node, "rowspan")
if (is.null(cspan)) cspan = 1
as.numeric(cspan)
})
)
nhds = length(hds)
nhds
newhd = hds
newhd.l = hd.l
for (ihd in seq_along(hd.rs)){
rs = hd.rs[[ihd]]
len = hd.l[[ihd]]
x = hds[[ihd]]
lvec = rs > 1
if (any(lvec)){
ind = which(lvec)
len = len[ind]
x = x[ind]
for (iind in seq_along(ind)){
myind = ind[iind]
putin = ""
xx = newhd[[ihd + 1]]
iseq = seq(0, myind -1)
xx = c(xx[iseq], putin, xx[seq(myind, length(xx))])
newhd[[ihd + 1]] = xx
xx = newhd.l[[ihd + 1]]
xx = c(xx[iseq], 1, xx[seq(myind, length(xx))])
newhd.l[[ihd + 1]] = xx
}
}
}
hds = newhd
hd.l = newhd.l
hdr.mat = mapply(function(hd, nhd){
rep(hd, nhd)
}, hds, hd.l)
hdr.mat
seq(1, nhds)
seq(min(1, nhds), nhds)
library(processVISION)
######################################
### Extract table from HTML file from summary/report from VISION
######################################
rm(list=ls())
libpck = function(pkg){
if (!require(pkg, character.only = TRUE)) install.packages(pkc)
require(pkg, character.only = TRUE)
}
libpck("processVISION")
libpck("XML")
libpck("stringr")
libpck("plyr")
######################################
# File to read in
######################################
# file = "~/Downloads/Patient Queries - minimal data.htm"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Outcome Tracking.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
# tab.attr = "class"
# tab.type ="normal_table"
tab = htmlToCSV(file, writeFile= FALSE,
tab.attr= "class",
tab.type= "normal_table")
######################################
### Extract table from HTML file from summary/report from VISION
######################################
rm(list=ls())
libpck = function(pkg){
if (!require(pkg, character.only = TRUE)) install.packages(pkc)
require(pkg, character.only = TRUE)
}
libpck("processVISION")
libpck("XML")
libpck("stringr")
libpck("plyr")
######################################
# File to read in
######################################
# file = "~/Downloads/Patient Queries - minimal data.htm"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Outcome Tracking.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
tab.attr = "class"
tab.type ="normal_table"
if (is.null(outfile)){
outdir = dirname(file)
bn = basename(file)
outfile = paste0(gsub("(.*)\\.htm", "\\1", bn), ".csv")
outfile = file.path(outdir, outfile)
}
##
doc = htmlParse(file, useInternalNodes=TRUE)
######################################
# Get table names from summary
######################################
sums <- xpathSApply(doc, '//table', xmlGetAttr, tab.attr)
sums = unlist(sums)
if (verbose){
cat("The types of tables available are:")
cat(paste0(paste(sums, collapse=", "), "\n"))
}
######################################
# we want queries (SHINY will dynamically select this)
######################################
which.sum = which(sums == tab.type)
sum.chosen = sums[which.sum]
xpath = paste0('//table[@', tab.attr, '="', sum.chosen , '"]')
######################################
# Get nodes from this tables
######################################
nodeset <- getNodeSet(doc, xpath)
xx = paste0(xpath, '//tr[@class="middle_row"]')
#   xx = paste0(xpath, '//tr')
hdrs = getNodeSet(doc, xx)
#   getNodeSet(hdrs, "//td[@class='column_header']")
######################################
# Get the colspan and rowspan info
######################################
hds = lapply(hdrs, function(x) xpathSApply(x, "./td", xmlValue))
hd.l = lapply(hdrs, function(x) xpathSApply(x, "./td",
function(node) {
cspan = xmlGetAttr(node, "colspan")
if (is.null(cspan)) cspan = 1
as.numeric(cspan)
})
)
hd.rs = lapply(hdrs, function(x) xpathSApply(x, "./td",
function(node) {
cspan = xmlGetAttr(node, "rowspan")
if (is.null(cspan)) cspan = 1
as.numeric(cspan)
})
)
nhds = length(hds)
if (verbose){
cat(paste0("Number of header rows:", nhds), "\n")
}
# hds = unlist(hds)
# hd.l = unlist(hd.l)
#####################################
# Multiple spanning rows  - need to add info to the next line
#####################################
newhd = hds
newhd.l = hd.l
for (ihd in seq_along(hd.rs)){
rs = hd.rs[[ihd]]
len = hd.l[[ihd]]
x = hds[[ihd]]
lvec = rs > 1
if (any(lvec)){
ind = which(lvec)
len = len[ind]
x = x[ind]
for (iind in seq_along(ind)){
myind = ind[iind]
putin = ""
xx = newhd[[ihd + 1]]
iseq = seq(0, myind -1)
xx = c(xx[iseq], putin, xx[seq(myind, length(xx))])
newhd[[ihd + 1]] = xx
xx = newhd.l[[ihd + 1]]
xx = c(xx[iseq], 1, xx[seq(myind, length(xx))])
newhd.l[[ihd + 1]] = xx
}
}
}
hds = newhd
hd.l = newhd.l
######################################
# Matrix of column heads
######################################
hdr.mat = mapply(function(hd, nhd){
rep(hd, nhd)
}, hds, hd.l)
if (nhds > 0){
hdr.mat = matrix(hdr.mat, ncol= nhds)
hds = apply(hdr.mat, 1, function(x) {
paste(str_trim(x), collapse = " ", sep = "")
})
}
if (verbose) {
cat("Header names are:")
cat(paste0(paste(hds, collapse=", "), "\n"))
}
# mynodes = nodeset[[1]]
######################################
# Parse the table
######################################
tables = readHTMLTable(nodeset[[1]], skip.rows = nhds,
stringsAsFactors=FALSE)
tables
nodeset
nhds
tables = readHTMLTable(nodeset[[1]], skip.rows = nhds,
stringsAsFactors=FALSE)
tables
length(nodeset[[1]])
nodeset[[1]]
tables = readHTMLTable(nodeset[[1]],
stringsAsFactors=FALSE)
tables
?readHTMLTable
tables = readHTMLTable(nodeset[[1]],
stringsAsFactors=FALSE)
xtab = tables
######################################
# Need to make sure this is a dataframe
stopifnot(inherits(tables, "data.frame"))
######################################
# Header workaround - readHTMLTable with header = TRUE didn't work
######################################
if (nhds > 0) {
tables = tables[-seq(1, nhds),]
colnames(tables) = hds
}
head(tables)
library(processVISION)
######################################
### Extract table from HTML file from summary/report from VISION
######################################
rm(list=ls())
libpck = function(pkg){
if (!require(pkg, character.only = TRUE)) install.packages(pkc)
require(pkg, character.only = TRUE)
}
libpck("processVISION")
libpck("XML")
libpck("stringr")
libpck("plyr")
######################################
# File to read in
######################################
# file = "~/Downloads/Patient Queries - minimal data.htm"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Outcome Tracking.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
tab.attr = "class"
tab.type ="normal_table"
tab = htmlToCSV(file, writeFile= FALSE,
tab.attr= "class",
tab.type= "normal_table")
head(tab)
######################################
### Extract table from HTML file from summary/report from VISION
######################################
rm(list=ls())
libpck = function(pkg){
if (!require(pkg, character.only = TRUE)) install.packages(pkc)
require(pkg, character.only = TRUE)
}
libpck("processVISION")
libpck("XML")
libpck("stringr")
libpck("plyr")
######################################
# File to read in
######################################
# file = "~/Downloads/Patient Queries - minimal data.htm"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Outcome Tracking.html"
file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
tab.attr = "class"
tab.type ="normal_table"
tab = htmlToCSV(file, writeFile= FALSE)
head(tab
)
library(processVISION)
######################################
### Extract table from HTML file from summary/report from VISION
######################################
rm(list=ls())
libpck = function(pkg){
if (!require(pkg, character.only = TRUE)) install.packages(pkc)
require(pkg, character.only = TRUE)
}
libpck("processVISION")
libpck("XML")
libpck("stringr")
libpck("plyr")
######################################
# File to read in
######################################
# file = "~/Downloads/Patient Queries - minimal data.htm"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Outcome Tracking.html"
file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
tab.attr = "class"
tab.type ="normal_table"
tab = htmlToCSV(file, writeFile= FALSE)
head(tab)
library(processVISION)
######################################
### Extract table from HTML file from summary/report from VISION
######################################
rm(list=ls())
libpck = function(pkg){
if (!require(pkg, character.only = TRUE)) install.packages(pkc)
require(pkg, character.only = TRUE)
}
libpck("processVISION")
libpck("XML")
libpck("stringr")
libpck("plyr")
######################################
# File to read in
######################################
# file = "~/Downloads/Patient Queries - minimal data.htm"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Outcome Tracking.html"
file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
tab.attr = "class"
tab.type ="normal_table"
tab = htmlToCSV(file, writeFile= FALSE)
head(tab)
######################################
### Extract table from HTML file from summary/report from VISION
######################################
rm(list=ls())
libpck = function(pkg){
if (!require(pkg, character.only = TRUE)) install.packages(pkc)
require(pkg, character.only = TRUE)
}
libpck("processVISION")
libpck("XML")
libpck("stringr")
libpck("plyr")
######################################
# File to read in
######################################
# file = "~/Downloads/Patient Queries - minimal data.htm"
file = "~/DHanley/XML_Processing/data/Subject Summary - Outcome Tracking.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
tab.attr = "class"
tab.type ="normal_table"
tab = htmlToCSV(file, writeFile= FALSE)
head(tab)
######################################
### Extract table from HTML file from summary/report from VISION
######################################
rm(list=ls())
libpck = function(pkg){
if (!require(pkg, character.only = TRUE)) install.packages(pkc)
require(pkg, character.only = TRUE)
}
libpck("processVISION")
libpck("XML")
libpck("stringr")
libpck("plyr")
######################################
# File to read in
######################################
file = "~/Downloads/Patient Queries - minimal data.htm"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Outcome Tracking.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - Subject Status.html"
# file = "~/DHanley/XML_Processing/data/Subject Summary - SAE Causality.html"
verbose = TRUE
outfile = NULL
colClasses = NULL
tab.attr = "class"
tab.type ="normal_table"
tab = htmlToCSV(file, writeFile= FALSE)
head(tab)
library(processVISION)
library(processVISION)
library(processVISION)
library(haven)
write_dta()
?write_dta()
